<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!--<bean id="user" class="lin01.User" init-method="myInit" destroy-method="myDestory" >-->
        <!--<property name="username" value="test" />-->
        <!--<property name="password" value="123456" />-->
    <!--</bean>-->
    <!--<bean class="lin01.MyBeanPostProcessor"/>-->

    <!--非静态方法需要先把instanceFactory类给创建出来，然后在accountService中指定factory-bean和factory-method-->
    <!--<bean id="instanceFactory" class="lin01_04bean.factory.InstanceFactory"/>-->
    <!--<bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"/>-->

    <!-- 第三种方式：使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)-->
    <!--<bean id="accountService" class="lin01_04bean.factory.StaticFactory" factory-method="getAccountService"/>-->
    <bean id="accountService" class="spring01_04bean.service.impl.AccountServiceImpl"
          scope="prototype" init-method="init" destroy-method="destroy"></bean>
    <bean id="date" class="java.util.Date" />
    <!--
    bean标签的scope属性：
            作用：用于指定bean的作用范围
            取值： 常用的就是单例的和多例的
                singleton：单例的（默认值）
                prototype：多例的
                request：作用于web应用的请求范围
                session：作用于web应用的会话范围
                global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session
    bean对象的生命周期
        单例对象
            出生：当容器创建时对象出生
            活着：只要容器还在，对象一直活着
            死亡：容器销毁，对象消亡
            总结：单例对象的生命周期和容器相同
        多例对象
            出生：当我们使用对象时spring框架为我们创建
            活着：对象只要是在使用过程中就一直活着。
            死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收
 -->
</beans>